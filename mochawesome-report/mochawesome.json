{
  "stats": {
    "suites": 1,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-06T15:27:43.248Z",
    "end": "2024-07-06T15:27:43.254Z",
    "duration": 6,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "344c084f-0dcc-4707-9caa-3ffb501bf5cd",
      "title": "",
      "fullFile": "/Users/guestuser/Public/at_js_edu/test/numbers-validator/isNumberEven.spec.js",
      "file": "/test/numbers-validator/isNumberEven.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2e6d05be-4154-4f4e-8f03-4efebd4cb671",
          "title": "NumbersValidator",
          "fullFile": "/Users/guestuser/Public/at_js_edu/test/numbers-validator/isNumberEven.spec.js",
          "file": "/test/numbers-validator/isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"NumbersValidator\"",
              "fullTitle": "NumbersValidator \"before each\" hook in \"NumbersValidator\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Instantiates a new NumbersValidator object before each test and assigns it to 'validator'\nvalidator = new NumbersValidator();",
              "err": {},
              "uuid": "1e74e2c4-f134-4d02-947a-71fa58f35435",
              "parentUUID": "2e6d05be-4154-4f4e-8f03-4efebd4cb671",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"NumbersValidator\"",
              "fullTitle": "NumbersValidator \"after each\" hook in \"NumbersValidator\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Sets the validator variable to null to clean up memory after each test\nvalidator = null;",
              "err": {},
              "uuid": "e3759338-4b42-47bb-8918-685b94a0934c",
              "parentUUID": "2e6d05be-4154-4f4e-8f03-4efebd4cb671",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true for even numbers",
              "fullTitle": "NumbersValidator should return true for even numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.isNumberEven(2)).to.be.true;",
              "err": {},
              "uuid": "3820b99c-7b34-42a8-9b5c-7c93b7aa50cb",
              "parentUUID": "2e6d05be-4154-4f4e-8f03-4efebd4cb671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for odd numbers",
              "fullTitle": "NumbersValidator should return false for odd numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.isNumberEven(3)).to.be.false;",
              "err": {},
              "uuid": "dbf79950-8d92-4327-8d90-48522e387082",
              "parentUUID": "2e6d05be-4154-4f4e-8f03-4efebd4cb671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the input is not a number",
              "fullTitle": "NumbersValidator should throw an error if the input is not a number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => validator.isNumberEven('a')).to.throw('[a] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "0b0b7a1b-0406-4545-8ab4-f6291eb16b90",
              "parentUUID": "2e6d05be-4154-4f4e-8f03-4efebd4cb671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array of even numbers",
              "fullTitle": "NumbersValidator should return an array of even numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3, 4, 5, 6];\nconst result = validator.getEvenNumbersFromArray(array);\nexpect(result).to.deep.equal([2, 4, 6]);",
              "err": {},
              "uuid": "e938cbd4-ebfb-482e-b2e7-8632893ded8b",
              "parentUUID": "2e6d05be-4154-4f4e-8f03-4efebd4cb671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the input is not an array of numbers",
              "fullTitle": "NumbersValidator should throw an error if the input is not an array of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => validator.getEvenNumbersFromArray([1, 'a', 3])).to.throw('[1,a,3] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "52830bcd-0464-4cc1-ae07-5275b33ca229",
              "parentUUID": "2e6d05be-4154-4f4e-8f03-4efebd4cb671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the input is not an array",
              "fullTitle": "NumbersValidator should throw an error if the input is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => validator.getEvenNumbersFromArray('not an array')).to.throw('[not an array] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "52c789da-c7bf-4884-a56e-c3acb4109f3a",
              "parentUUID": "2e6d05be-4154-4f4e-8f03-4efebd4cb671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if all elements are numbers",
              "fullTitle": "NumbersValidator should return true if all elements are numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3, 4];\nexpect(validator.isAllNumbers(array)).to.be.true;",
              "err": {},
              "uuid": "5c22e0eb-4be1-42d4-96f1-8f7c0a7a00b6",
              "parentUUID": "2e6d05be-4154-4f4e-8f03-4efebd4cb671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if any element is not a number",
              "fullTitle": "NumbersValidator should return false if any element is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 'a', 3, 4];\nexpect(validator.isAllNumbers(array)).to.be.false;",
              "err": {},
              "uuid": "536f7af3-2983-4576-9371-c7d9efa2476b",
              "parentUUID": "2e6d05be-4154-4f4e-8f03-4efebd4cb671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the input is not an array",
              "fullTitle": "NumbersValidator should throw an error if the input is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => validator.isAllNumbers('not an array')).to.throw('[not an array] is not an array');",
              "err": {},
              "uuid": "f5727cd0-2e6c-46c6-89ba-db5987b6cc7e",
              "parentUUID": "2e6d05be-4154-4f4e-8f03-4efebd4cb671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if the number is an integer",
              "fullTitle": "NumbersValidator should return true if the number is an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.isInteger(2)).to.be.true;",
              "err": {},
              "uuid": "99c44904-b974-41ce-aa12-56683c23c2c3",
              "parentUUID": "2e6d05be-4154-4f4e-8f03-4efebd4cb671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if the number is not an integer",
              "fullTitle": "NumbersValidator should return false if the number is not an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.isInteger(2.5)).to.be.false;",
              "err": {},
              "uuid": "0cda8244-dbaa-48f1-ba1b-8702d13469ed",
              "parentUUID": "2e6d05be-4154-4f4e-8f03-4efebd4cb671",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if the input is not a number",
              "fullTitle": "NumbersValidator should throw an error if the input is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => validator.isInteger('a')).to.throw('[a] is not a number');",
              "err": {},
              "uuid": "63ae474e-6f27-41b2-ab6f-a040f6902d66",
              "parentUUID": "2e6d05be-4154-4f4e-8f03-4efebd4cb671",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3820b99c-7b34-42a8-9b5c-7c93b7aa50cb",
            "dbf79950-8d92-4327-8d90-48522e387082",
            "0b0b7a1b-0406-4545-8ab4-f6291eb16b90",
            "e938cbd4-ebfb-482e-b2e7-8632893ded8b",
            "52830bcd-0464-4cc1-ae07-5275b33ca229",
            "52c789da-c7bf-4884-a56e-c3acb4109f3a",
            "5c22e0eb-4be1-42d4-96f1-8f7c0a7a00b6",
            "536f7af3-2983-4576-9371-c7d9efa2476b",
            "f5727cd0-2e6c-46c6-89ba-db5987b6cc7e",
            "99c44904-b974-41ce-aa12-56683c23c2c3",
            "0cda8244-dbaa-48f1-ba1b-8702d13469ed",
            "63ae474e-6f27-41b2-ab6f-a040f6902d66"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.6.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}